/*
 * TODO
 * 
 * Before using this example, 
 * 
 * 1. rename this file to 00_sharedconst.js
 * 2. update the constants below 
 * 
 * REGION : the AWS Region name where you want to use AWS KMS 
 * ROLE_ARN : an AWS IAM Role your created (see IAM directory for a script).
 * KMS_MASTER_KEY_ARN : The ARN of the Customer Master Key you created on AWS KMS
 * This role gives permission to this application to encrypt or decrypt data keys with AWS KMS
 * USER : the MongoDB cluster username
 * PWD  : the MongoDB cluster password 
 * HOST : the MongoDB cluster DNS name
 * 
 */

const ROLE_ARN = 'arn:aws:iam::YOUR_ACCOUNT_ID:role/YOUR_IAM_ROLE_NAME'
const REGION = 'YOUR_AWS_REGION';
const KMS_MASTER_KEY_ARN = `arn:aws:kms:${REGION}:YOUR_ACCOUNT_ID:key/YOUR_KMS_MASTER_KEY_ID`
const USER = 'YOUR_MONGO_USERNAME'
const PWD  = 'YOUR_MONGO_PASSWORD'
const HOST = 'YOUR_MONGO_DNS_CLUSTER_NAME'

//  NO CHANGES REQUIRED BELOW THIS LINE 

const { AssumeRoleCommand } = require('@aws-sdk/client-sts');
const { STSClient } = require('@aws-sdk/client-sts');

const stsClient = new STSClient({ region: REGION });

// Set the parameters
const stsParams = {
    RoleArn: ROLE_ARN,
    RoleSessionName: "mongodb-session",
    DurationSeconds: 900
};

async function getAWSCredentials() {
    try {
        //Assume Role
        console.log('Assuming role to retrieve AWS credentials');
        const data = await stsClient.send(new AssumeRoleCommand(stsParams));
        console.log('Received STS data : ', data.AssumedRoleUser.AssumedRoleId);
        return {
            accessKeyId: data.Credentials.AccessKeyId,
            secretAccessKey: data.Credentials.SecretAccessKey,
            sessionToken: data.Credentials.SessionToken,
        };
    } catch (err) {
        console.log("Error", err);
    }
}

async function getKMSProviders() {
    const roleCredentials = await getAWSCredentials()
    return {
        aws: {
            accessKeyId: roleCredentials.accessKeyId,
            secretAccessKey: roleCredentials.secretAccessKey,
            sessionToken: roleCredentials.sessionToken
        },
    }
}

const keyVaultDb = "demo"
const keyVaultCollection = "__keystore"

const connectionString = `mongodb+srv://${USER}:${PWD}@${HOST}/?retryWrites=true&w=majority`;
const keyVaultNamespace = `${keyVaultDb}.${keyVaultCollection}`;

const kmsKeyARn = KMS_MASTER_KEY_ARN
const altKeyName = 'A_DATA_KEY'

// https://stackoverflow.com/a/60615051/663360 
module.exports = {
    connectionString,
    keyVaultNamespace,
    getKMSProviders,
    kmsKeyARn,
    altKeyName,
    keyVaultDb,
    keyVaultCollection
}